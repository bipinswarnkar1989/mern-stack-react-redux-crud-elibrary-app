{"version":3,"sources":["../../server/controllers/book.server.controller.js"],"names":["storage","diskStorage","destination","req","file","cb","filename","date","Date","now","yourfilename","originalname","split","length","replace","fieldname","Upload","fileFilter","mimetype","Error","single","addBook","res","err","console","log","json","body","newBook","filePath","path","fileName","save","book","getBooks","next","find","exec","books","getBookById","_id","params","id","deleteBook","findByIdAndRemove","unlink","title"],"mappings":"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","file":"book.server.controller.js","sourcesContent":["import mongoose from 'mongoose';\nimport multer from 'multer';\nimport fs from 'fs';\n//import models\nimport  Book from '../models/book.server.model';\n\n//set multer storage\nlet storage = multer.diskStorage({\n  destination: (req,file,cb) => {\n    cb(null, './uploads');\n  },\n  filename: (req,file,cb) => {\n    const date = Date.now();\n    const yourfilename = file.originalname.split('.')[file.originalname.split('.').length - 2].replace(/ /g, '_');\n    cb(null, file.fieldname + '-' + date + '_'+ yourfilename + '.' + file.originalname.split('.')[file.originalname.split('.').length - 1]);\n  }\n});\n\nconst Upload = multer({\n  storage: storage,\n  fileFilter: function(req, file, cb) {\n            if (file.mimetype === 'application/pdf') {\n                cb(null, true);\n            } else {\n                cb(new Error('Only pdf allowed'), false);\n            }\n        }\n}).single('file');\n\n\nexport const addBook = (req,res) => {\n        Upload(req,res,(err) => {\n          if(err){\n            console.log('ERROR:'+err);\n            return res.json({'success':false,'message':'Failed. Only pdf allowed',err});;\n          }\n          else{\n            console.log(req.body);\n            //Create a new instance of Book model\n            const newBook = new Book(req.body);\n            newBook.filePath = req.file.path;\n            newBook.fileName = req.file.filename;\n            newBook.save((err,book) => {\n              if(err){\n              return res.json({'success':false,'message':'Some Error'});\n              }\n\n              return res.json({'success':true,'message':'Book added successfully',book});\n            })\n          }\n        });\n\n\n}\n\n export const getBooks = (req,res,next) => {\n         Book.find().exec((err,books) => {\n           if(err){\n           return res.json({'message':'Some Error'});\n           }\n\n           return res.json({'message':'Books fetched successfully',books});\n         })\n}\n\nexport const getBookById = (req,res) => {\n  Book.find({_id:req.params.id}).exec((err,book) => {\n    if(err){\n    return res.json({'success':false,'message':'Some Error'});\n    }\n    if(book.length){\n      return res.json({'success':true,'message':'Book fetched by id successfully',book});\n    }\n    else{\n      return res.json({'success':false,'message':'Book with the given id not found'});\n    }\n  })\n}\n\nexport const deleteBook = (req,res) => {\n  Book.findByIdAndRemove(req.params.id,(err,book) => {\n    if(err){\n    return res.json({'success':false,'message':'Some Error','error':err});\n    }\n    fs.unlink(book.filePath);\n    return res.json({'success':true,'message':book.title+' deleted successfully'});\n  })\n}\n"]}